#! /bin/sh -e
# 05_fix_pointer_and_int_comparison.dpatch by David HÃ¤rdeman <david@2gen.com>
#
## DP: fix pointer and int comparison

if [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -f --no-backup-if-mismatch -p1 < $0;;
    -unpatch) patch -f --no-backup-if-mismatch -R -p1 < $0;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1;;
esac

exit 0

@DPATCH@
--- cryptsetup-1.0.3-orig/lib/gcrypt.c	2005-06-20 11:06:23.000000000 +0200
+++ cryptsetup-1.0.3/lib/gcrypt.c	2006-06-13 00:46:57.000000000 +0200
@@ -12,7 +12,7 @@
 static int gcrypt_hash(void *data, int size, char *key, const char *passphrase)
 {
 	gcry_md_hd_t md;
-	int algo = (int)data;
+	int algo = *((int *)data);
 	int len = gcry_md_get_algo_dlen(algo);
 	int round, i;
 
@@ -68,12 +68,22 @@
 	}
 
 	for(i = 0; i < size; i++) {
+		hashes[i].name = NULL;
+		hashes[i].private = NULL;
+	}
+
+	for(i = 0; i < size; i++) {
 		char *p;
 
 		hashes[i].name = strdup(gcry_md_algo_name(list[i]));
+		if(!hashes[i].name)
+			goto err;
 		for(p = (char *)hashes[i].name; *p; p++)
 			*p = tolower(*p);
-		hashes[i].private = (void *)list[i];
+		hashes[i].private = malloc(sizeof(int));
+		if(!hashes[i].private)
+			goto err;
+		*((int *)hashes[i].private) = list[i];
 		hashes[i].fn = gcrypt_hash;
 	}
 	hashes[i].name = NULL;
@@ -83,14 +93,25 @@
 	free(list);
 
 	return hashes;
+
+err:
+	free(list);
+	for(i = 0; i < size; i++) {
+		free(hashes[i].name);
+		free(hashes[i].private);
+	}
+	free(hashes);
+	return NULL;
 }
 
 static void gcrypt_free_hashes(struct hash_type *hashes)
 {
 	struct hash_type *hash;
 
-	for(hash = hashes; hash->name; hash++)
+	for(hash = hashes; hash->name; hash++) {
 		free(hash->name);
+		free(hash->private);
+	}
 
 	free(hashes);
 }
--- cryptsetup-1.0.3-orig/lib/internal.h	2005-11-08 08:46:14.000000000 +0100
+++ cryptsetup-1.0.3/lib/internal.h	2006-06-13 00:46:57.000000000 +0200
@@ -20,7 +20,7 @@
 #define CRYPT_FLAG_PRIVATE_MASK ((unsigned int)-1 << 24)
 
 struct hash_type {
-	const char	*name;
+	char		*name;
 	void		*private;
 	int		(*fn)(void *data, int size, char *key,
 			      const char *passphrase);
