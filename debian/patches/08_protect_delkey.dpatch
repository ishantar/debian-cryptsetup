#! /bin/sh /usr/share/dpatch/dpatch-run
## 08_protect_delkey.dpatch by Jonas Meurer <mejo@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: ask for a remaining passphrase or key before deleting a slot.

@DPATCH@

--- cryptsetup-1.0.3.orig/lib/setup.c	2006-08-02 15:54:03.000000000 +0200
+++ cryptsetup-1.0.3/lib/setup.c	2006-08-04 03:01:18.000000000 +0200
@@ -729,6 +729,37 @@
 	return r;
 }
 
+static int __crypt_luks_del_key(int arg, struct setup_backend *backend, struct crypt_options *options)
+{
+	struct luks_masterkey mk;
+	struct luks_phdr hdr;
+	char *password; unsigned int passwordLen;
+	const char *device = options->device;
+	int keyIndex = options->key_slot;
+	int r;
+	
+	// r = LUKS_read_phdr(device, &hdr);
+	// if(r < 0) return r;
+
+	options->key_size = 0; // FIXME, define a clean interface some day.
+	get_key(options,"Enter any remaining LUKS passphrase: ",&password,&passwordLen);
+	if(!password) {
+		r = -EINVAL; goto out;
+	}
+	if(LUKS_open_any_other_key(device, keyIndex, password, passwordLen, &hdr, &mk, backend) < 0) {
+		printf("No remaining key available with this passphrase.\n");
+		r = -EPERM; goto out;
+	}
+	safe_free(password);
+	
+	r = LUKS_del_key(device, keyIndex);
+	if(r < 0) goto out;
+
+	r = 0;
+out:
+	return r;
+}
+
 static int crypt_job(int (*job)(int arg, struct setup_backend *backend,
                                 struct crypt_options *options),
                      int arg, struct crypt_options *options)
@@ -796,7 +827,7 @@
 
 int crypt_luksDelKey(struct crypt_options *options)
 {
-	return LUKS_del_key(options->device, options->key_slot);
+	return crypt_job(__crypt_luks_del_key, 0, options);
 }
 
 int crypt_luksAddKey(struct crypt_options *options)
--- cryptsetup-1.0.3.orig/luks/keymanage.c	2006-04-02 10:36:11.000000000 +0200
+++ cryptsetup-1.0.3/luks/keymanage.c	2006-08-04 03:02:15.000000000 +0200
@@ -341,6 +341,30 @@
 	return i==LUKS_NUMKEYS?-EPERM:0;
 }
 
+int LUKS_open_any_other_key(const char *device, 
+			    unsigned int key_slot, 
+			    const char *password, 
+			    size_t passwordLen,
+			    struct luks_phdr *hdr, 
+			    struct luks_masterkey *mk,
+			    struct setup_backend *backend)
+{
+	unsigned int i;
+	int r;
+
+	r = LUKS_read_phdr(device, hdr);
+	if(r < 0) 
+      		return r;
+
+	mk->keyLength = hdr->keyBytes;
+	for(i=0; i<LUKS_NUMKEYS; i++) {
+		if(i != key_slot && LUKS_open_key(device, i, password, passwordLen, hdr, mk, backend) == 0)
+			break;
+	}
+	if(i!=LUKS_NUMKEYS) printf("key slot %d unlocked.\n",i);
+	return i==LUKS_NUMKEYS?-EPERM:0;
+}
+
 /*
  * Wipe patterns according to Gutmann's Paper
  */
--- cryptsetup-1.0.3.orig/luks/luks.h	2006-03-30 14:06:43.000000000 +0200
+++ cryptsetup-1.0.3/luks/luks.h	2006-08-02 20:34:59.000000000 +0200
@@ -113,6 +113,14 @@
 					struct luks_masterkey *mk,
 					struct setup_backend *backend);
 
+int LUKS_open_any_other_key(const char *device, 
+					unsigned int key_slot, 
+					const char *password, 
+					size_t passwordLen, 
+					struct luks_phdr *hdr, 
+					struct luks_masterkey *mk,
+					struct setup_backend *backend);
+
 int LUKS_del_key(const char *device, unsigned int keyIndex);
 int LUKS_is_last_keyslot(const char *device, unsigned int keyIndex);
 int LUKS_benchmarkt_iterations();
--- cryptsetup-1.0.3.orig/man/cryptsetup.8	2006-08-02 15:54:03.000000000 +0200
+++ cryptsetup-1.0.3/man/cryptsetup.8	2006-08-02 15:54:40.000000000 +0200
@@ -60,7 +60,7 @@
 .PP
 \fIluksDelKey\fR <device> <key slot number>
 .IP
-remove key from key slot. No options.
+remove key from key slot. A remaining passphrase or key file (via \-\-key-file) must be supplied. <options> can be [\-\-key-file].
 .PP
 \fIluksUUID\fR <device>
 .IP
--- cryptsetup-1.0.3.orig/src/cryptsetup.c	2006-08-02 15:54:03.000000000 +0200
+++ cryptsetup-1.0.3/src/cryptsetup.c	2006-08-02 15:54:40.000000000 +0200
@@ -258,6 +258,8 @@
 	struct crypt_options options = {
 		.device = action_argv[0],
 		.key_slot = atoi(action_argv[1]),
+		.key_file = opt_key_file,
+		.timeout = opt_timeout,
 	};
 	int r; 
 
