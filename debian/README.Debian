Cryptsetup for Debian
---------------------

   Table of Contents

   1. Introduction into Cryptsetup for Debian

   2. Encrypted swap partition(s)

   3. Insecure mode/owner for keys

   4. Cryptsetup and udev

   5. The 'check' option

   6. Cryptsetup and Splashy

   7. Credits


1. Introduction into Cryptsetup for Debian
------------------------------------------

 Cryptsetup is a command-line interface for configuring encrypted block
devices via dm-crypt, a kernel device-mapper target.
The Debian cryptsetup package provides the initscript /etc/init.d/cryptdisks
and a configuration file /etc/crypttab for automatically configuring
encrypted devices at boot time. See man crypttab(5) for more information.

 The /sbin/luksformat script provides a simple interface for creating an
encrypted device that follows the LUKS standard and for putting a file system
onto the encrypted device. See man luksformat(8) for more information.

 If you wish to perform a Debian installation to an encrypted root, you might
be interested in using a version of Debian Installer with partman-crypto,
which will install the system and setup cryptsetup and initramfs-tools.

 For instructions about how to encrypt your root filesystem and integrate
cryptsetup into initramfs on a running system, see
	/usr/share/doc/cryptsetup/README.initramfs.gz.

For instructions about how to encrypt your swap partition(s), see below.


2. Encrypted swap partition(s)
------------------------------

 An encrypted swap partition prevents spying on plaintext secrets (passwords)
that may be written to disk when memory is swapped to disk.

 To encrypt your swap partitions, you'll first have to deactivate your swap:

swapoff -a

 You'll have to add an entry for every swap partition in /etc/crypttab. Be
sure toeplace the source device (here /dev/hda9) with your swap devices:
# <target name> <source device>	<key file>	<options>
cswap1		/dev/hda9	/dev/random	swap,cipher=aes-cbc-essiv:sha256,size=256,hash=sha256

 Now you need to change the swap devices in /etc/fstab to the encrypted swap
device names (/dev/mapper/cswap1 in this example).

# <file system> <mount point>   <type>  <options>     <dump>  <pass>
/dev/hda9        none           swap    sw            0       0

becomes 

# <file system> <mount point>   <type>  <options>     <dump>  <pass>
/dev/mapper/cswap1  none        swap    sw            0       0


 Finally, you need to start the cryptsetup swap devices and reactivate swap:

/etc/init.d/cryptdisks start
swapon -a

 That's it! You have a crypted swap device. Note that /dev/random as source
for your keyfile in /etc/crypttab might not generate enough random bytes.
If you're in doubt, you can use the (less secure) device /dev/urandom instead.

 Read the crypttab(5) manpage for more information, for example options to use
a different encryption algorithm than the default.


3. Insecure mode/owner for keys
-------------------------------

 Any key that is stored somewhere to be used with cryptsetup should have the
mode 400 (-r--------) and owner/group root. This way only root has permissions
to read the file. 'chown root.root keyfile' and 'chmod 400 keyfile' will do
the trick for you.

 If a key is stored on a vfat filesystem (very common for removable media),
chmod and chown will not work. The vfat filesytem (and several others too)
does not support file permissions and ownership. Instead, you should use the 
uid, gid and umask options in /etc/fstab to ensure secure permissions for the
key.

 As an example, assume that /dev/sdg2 is the removable media containing
keyfiles on a vfat filesystem and that it is going to be mounted on 
/media/flash0. The configuration in /etc/fstab should then be something
like this:

# <file system>	<mount point>	<type>	<options>		<dump>	<pass>
/dev/sdg2	/media/flash0	vfat	uid=0,gid=0,umask=277	0	0

 If you are using udev, it might be a good idea to use the /dev/disk/by-label
links instead of /dev/sdg2 as the link will work no matter in which order the
media is inserted and detected.


4. Cryptsetup and udev
----------------------

 As a workaround for some yet-to-be-fixed race condition in kernel,
device-mapper or udev, cryptsetup currently runs udevsettle.

 This leads to problems if you invoke cryptsetup as part of a udev rule.
udevsettle waits until queued kernel/udev events are processed and the
'run programs' have finished. Due to cryptsetup itself being a 'run
program' in this case, this ends in a deadlock.

 Therefore cryptsetup should be detached directly after invocation in this
case, so that it runs asynchronously.


5. The 'check' option
---------------------

 The 'check' option in crypttab allows to configure checks to be run against
the target device after cryptsetup has been invoked.
The default check 'vol_id' can check for any known filesystem type, as it uses
vol_id from udev. you can check for a particular filesystem by giving for
example 'checkargs=ext2' or 'checkargs=swap' as an option in /etc/crypttab.

 The 'precheck' option is for configuring checks to be run against the source
device before cryptsetup has been invoked. They are only available for plain
cryptsetup devices. LUKS devices have a hardcoded precheck that uses the
'isLuks' command of cryptsetup.
As there is no way to check a device for plain cryptsetup data, you can only
check for data that should not be on the device. for example the check could
search for common filesystems on the device, and abort if it finds any.
As this will never really ensure that no data is lost, the package doesn't
provide such a check.
Another example for a precheck could be to check the partition table id. For
a device that shall be used as swap partition, it could verify that only
partitions with type 'swap' (82) are used for encrypted swap.

 Please send us your checks, if you write new ones. If they are generally
useful, we will include them in the package.

 See man crypttab(5) for more information about the checksystem.

6. Cryptsetup and Splashy
-------------------------

 Splashy support in cryptsetup is currently somehow limited. Splashy is known
to freeze at the password dialog for encrypted non-root filesystems. Only the
password dialog for the encrypted root filesystem works.

 It seems like splashy freezes for any input dialog in initscripts while
input dialogs at initramfs stage seem to work. This leads to the assumption
that the bug is somewhere in splashy and neither in cryptsetups initscripts
nor in askpass, the keyscript that is responsible for cryptsetups passphrase
input dialogs.

7. Credits
----------

 People who contributed to documentation for the Debian cryptsetup package:

Jonas Meurer <jonas@freesources.org>
David HÃ¤rdeman <david@hardeman.nu>
Bastian Kleineidam <calvin@debian.org>
Michael Gebetsroither <michael.geb@gmx.at>

 -- Jonas Meurer <mejo@debian.org>, Sun, 27 Jul 2008 17:02:56 +0200
