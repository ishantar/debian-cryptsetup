#! /bin/sh
### BEGIN INIT INFO
# Provides:          cryptdisks
# Required-Start:    checkroot
# Required-Stop:     umountroot
# Should-Start:      udev devfsd raid2 mdadm lvm
# Should-Stop:
# Default-Start:     S
# Default-Stop:      0 6
# Short-Description: Setup encrypted block devices.
# Description:
### END INIT INFO

. /lib/lsb/init-functions

CRYPTCMD=/sbin/cryptsetup
DEVMAPCMD=/sbin/dmsetup
LOSETUP=/sbin/losetup
TABFILE=/etc/crypttab
MAPPER=/dev/mapper
TIMEOUTCMD=/usr/bin/timeout

test -x $CRYPTCMD  || exit 0
test -x $DEVMAPCMD || exit 0
test -f $TABFILE   || exit 0             

[ -r /etc/default/cryptdisks ] && . /etc/default/cryptdisks

case "$CRYPTDISKS_ENABLE" in
  [Nn]*)
  	exit 0
  	;;
esac

$DEVMAPCMD mknodes

parse_opts () {
	PARAMS=""
	POSTCHECK=""
	PRECHECK=""
	RETRY="no"
	MAKETMP=""
	MAKESWAP=""
	USELUKS=""
	SKIP=""
	TIMEOUT=""

	# Parse the options field, convert to cryptsetup parameters
	# and contruct the command line
	while test "x$opt" != "x" ; do
		ARG=`echo $opt | sed "s/,.*//"`
		opt=${opt##$ARG}
		opt=${opt##,}
		PARAM=`echo $ARG | sed "s/=.*//"`
		
		case "$ARG" in
		  *=*)
		  	PARAM=`echo $ARG | sed "s/=.*//"`
		  	VALUE=${ARG##$PARAM=}
		  	;;
		  *)
		  	PARAM=$ARG
		  	VALUE=""
			;;
		esac
		
		case "$PARAM" in 
		  readonly)
		  	PARAMS="$PARAMS -r"
		  	;;
		  cipher)
		  	PARAMS="$PARAMS -c $VALUE"
		  	if test "x$VALUE" = "x" ; then
		  		echo -e "\n - no value for cipher option, skipping" >&2
		  		SKIP="yes"
		  	fi
		  	;;
		  size)
		  	PARAMS="$PARAMS -s $VALUE"
		  	if test "x$VALUE" = "x" ; then
		  		echo -e "\n - no value for size option, skipping" >&2
		  		SKIP="yes"
		  	fi
		  	;;
		  hash)
		  	PARAMS="$PARAMS -h $VALUE"
		  	if test "x$VALUE" = "x" ; then
		  		echo -e "\n - no value for hash option, skipping" >&2
		  		SKIP=yes
		  	fi
		  	;;
		  verify)
		  	PARAMS="$PARAMS -y"
		  	;;
		  postcheck)
		  	if test "x$VALUE" = "x" ; then
		  		POSTCHECK="$CRYPTDISKS_POSTCHECK"
		  	else
		  		POSTCHECK="$VALUE"
		  	fi
		  	if [ "$POSTCHECK" -a -x /lib/cryptsetup/postchecks/"$POSTCHECK" ]; then
		   		POSTCHECK="/lib/cryptsetup/postchecks/$POSTCHECK"
		  	else
		  		POSTCHECK=""
		  	fi
		  	;;
		  precheck)
		  	if test "x$VALUE" = "x" ; then
		  		PRECHECK="$CRYPTDISKS_PRECHECK"
		  	else
		  		PRECHECK="$VALUE"
		  	fi
		   	if [ "$PRECHECK" -a -x /lib/cryptsetup/prechecks/"$PRECHECK" ]; then
		  		PRECHECK="/lib/cryptsetup/prechecks/$PRECHECK"
		  	else
		  		PRECHECK=""
		  	fi
		  	;;
		  retry)
		  	if test "x$VALUE" = "x" ; then
		  		RETRY="$CRYPTDISKS_RETRY"
		  	else
		  		RETRY="$VALUE"
		  	fi
		  	case "$RETRY" in
		  	  no|[0-9]*)
		  	  	;;
		  	  *)
			  	echo " - option RETRY is wrongly set to $RETRY - forced to 'no' " >&2
			  	RETRY="no"
			  	;;
			esac
		  	;;
		  timeout)
		  	if test "x$VALUE" = "x" ; then
		  		TIMEOUT="$CRYPTDISKS_TIMEOUT"
		  	else
		  		TIMEOUT="$VALUE"
		  	fi
		  	[ -x $TIMEOUTCMD ] || TIMEOUT=""
		  	;;
		  swap)
		  	MAKESWAP=yes
		  	;;
		  tmp)
		  	MAKETMP=yes
		  	;;
		  luks)
		  	USELUKS=yes
		esac
	done

	# Password processing in luks* from cryptsetup is newline sensitive
	# reading stops after \n is received!
	if test "x$USELUKS" = "xyes" && \
	   test "x$MAKESWAP" = "xyes" && \
	   test "x$INTERACTIVE" != "xyes"; then
		echo -e "\n - you should not mix swap and luks, skipping" >&2
		continue
	fi
}

lo_setup () {
	# Set up loopback devices
	if test -f "$src" ; then
		test -d /sys/block/loop0 || modprobe loop || SKIP=yes
		LOOP_ID=
		for i in 0 1 2 3 4 5 6 7 ; do
			if test "x`cat /sys/block/loop$i/size`" = "x0" ; then
				LOOP_ID=$i
				break
			fi
		done
		if test "x$LOOP_ID" = "x" ; then
			SKIP=yes
		else
			$LOSETUP /dev/loop$LOOP_ID $src || SKIP=yes
			src=/dev/loop$LOOP_ID
		fi
	fi
}

case "$1" in
  start)
	log_action_begin_msg "Starting crypto disks"
	egrep -v "^[[:space:]]*(#|$)" $TABFILE | while read dst src key opt; do
		log_progress_msg "$dst"
		
		if ! test -r "$src" ; then
			echo -e "\n - Device '$src' does not exist, skipping" >&2
			continue
		fi

		if test -b $MAPPER/$dst; then
			log_action_cont_msg "(running)"
		else
			log_action_cont_msg "(starting)"
			if [ "x$key" != "x" ] && [ "x$key" != "xnone" ]; then
				INTERACTIVE="no"
				if test -e "$key" ; then
					MODE=`ls -l $key | sed 's/^....\(......\).*/\1/'`
					OWNER=`ls -l $key | sed 's/^[^ ]* *[^ ]* *\([^ ]*\).*/\1/'`
					if test "$MODE" != "------" && \
					   test "$key" != "/dev/urandom"  && \
					   test "$key" != "/dev/hwrandom" && \
					   test "$key" != "/dev/random"; then
						echo " - INSECURE MODE FOR $key" >&2
					fi
					if test $OWNER != root; then
						echo " - INSECURE OWNER FOR $key" >&2
					fi
				else
					echo -e "\n - Keyfile for '$dst' not found, skipping" >&2
					continue
				fi
			else
				INTERACTIVE="yes"
				echo ""
			fi

			parse_opts

			lo_setup

			if test "x$SKIP" = "xyes" ; then
				continue
			fi

			if test "x$USELUKS" = "xyes" ; then
				if $CRYPTCMD isLuks $src >/dev/null 2>&1; then
					while [ "x$RETRY" = xno ]  || [ "$RETRY" -gt 0 ] ; do
						if test "x$INTERACTIVE" = "xyes" ; then
							if test "x$TIMEOUT" = "x"; then
							  $CRYPTCMD $PARAMS luksOpen $src $dst <&1
							else
							  /usr/bin/timeout $TIMEOUT "$CRYPTCMD $PARAMS luksOpen $src $dst <&1" \
							  		|| echo "TIMEOUT: No password entered for $dst"
							fi
							RESULT=$?
						else
							$CRYPTCMD $PARAMS luksOpen $src $dst --key-file $key <&1
							RESULT=$?
						fi
						if [ $RESULT = 0 ] ; then
							if [ "$POSTCHECK" = ""  ] || $POSTCHECK $MAPPER/$dst ; then
								break
							else
								echo " - the postcheck for '$MAPPER/$dst' failed" >&2
								#echo " - removing the crypto device $dst" >&2
								#$CRYPTCMD luksClose $dst
								sleep 1
							fi
						fi
						test "x$RETRY" = "xno" && break
						RETRY=$(($RETRY-1))
						[ $RETRY -gt 0 ] && echo " - retrying for $dst"
					done
				else
					echo -e "\n - Device '$src' is not a LUKS partition, skipping" >&2
					continue
				fi
							
			else
				if [ "$PRECHECK" = "" ] || $PRECHECK $src; then
					while [ "x$RETRY" = xno ]  || [ "$RETRY" -gt 0 ] ; do
						if test "x$INTERACTIVE" = "xyes" ; then
							if test "x$TIMEOUT" = "x"; then
							  $CRYPTCMD $PARAMS create $dst $src <&1
							else
							  /usr/bin/timeout $TIMEOUT "$CRYPTCMD $PARAMS create $dst $src <&1" \
							  		|| echo "TIMEOUT: No password entered for $dst"
							fi
							RESULT=$?
						else
							$CRYPTCMD $PARAMS -d $key create $dst $src
							RESULT=$?
						fi
						if [ $RESULT = 0 ] ; then
							if [ "$POSTCHECK" = ""  ] || $POSTCHECK $MAPPER/$dst ; then
								break
							else
								echo " - the postcheck for '$MAPPER/$dst' failed - maybe the password is wrong" >&2
								echo " - removing the crypto device $dst" >&2
								$CRYPTCMD remove $dst
								sleep 1
							fi
						fi
						test "x$RETRY" = "xno" && break
						RETRY=$(($RETRY-1))
						[ $RETRY -gt 0 ] && echo " - retrying for $dst"
					done
				else
					echo " - the precheck for '$src' failed" >&2
					sleep 1
				fi
			fi

			if test "x$MAKESWAP" = "xyes" && test -b $MAPPER/$dst; then
				mkswap $MAPPER/$dst 2>/dev/null >/dev/null
			fi

			if test "x$MAKETMP" = "xyes" && test -b $MAPPER/$dst; then
				mke2fs $MAPPER/$dst 2>/dev/null >/dev/null
				mount -t ext2 $MAPPER/$dst /tmp
				chmod 1777 /tmp
				umount /tmp
			fi
		fi
	done
	log_action_end_msg $?
	;;
  stop)
	log_action_begin_msg "Stopping crypto disks..."
	egrep -v "^[[:space:]]*(#|$)" $TABFILE | while read dst src key; do
		log_progress_msg "$dst"
		if test -b $MAPPER/$dst; then
			if $DEVMAPCMD info $dst | grep -q '^Open count: *0$'; then
				dev=`$DEVMAPCMD table $dst | sed 's/^.* \([0-9]*:[0-9]*\) .*/\1/'`
				major=`echo $dev | sed 's/:.*//'`
				minor=`echo $dev | sed 's/.*://'`
				
				log_action_cont_msg "(stopping)"
				$CRYPTCMD remove $dst
				
				# Detach loopback device, if attached
				if test -f $src -a $major -eq 7; then
					$LOSETUP -d /dev/loop$minor
				fi
			else
				log_action_cont_msg "(busy)"
			fi
		else
			log_action_cont_msg "(stopped)"
		fi
	done

	log_action_end_msg $?
	;;
  restart|reload|force-reload)
	$0 stop
	$0 start
	;;
  *)
	echo "Usage: cryptdisks {start|stop|restart|reload|force-reload}"
	exit 1
	;;
esac
